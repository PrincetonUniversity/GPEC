&PENT_INPUT
    idconfile  = "euler.bin"            ! Eigenfunctions output by DCON run
    kinetic_file = "g147131.02300_DIIID_KEFIT.kin"        ! Ascii profiles. columns: psi_n, ni(m^-3), ne(m^-3), ti(eV), te(eV), omega_EXB(rad/s)
    data_dir = ""                       ! Location of pre-formed fnml matrix used in rlar and clar methods. "default" uses $GPECHOME/pentrc.
    peq_file = ""			! Ascii displacement. columns: psi_n, m, real(xi^psi), imag(xi^psi), real(xi^alpha), imag(xi^alpha). Default uses "gpec_xclebsch_n#.out"

    mi = 2                              ! Main ion mass (u)
    zi = 1                              ! Main ion charge (e)
    mimp = 12                           ! Impurity mass (u)
    zimp = 6                            ! Impurity charge (e)
    nl = 6                              ! Bounce harmonic range (-nl to nl)
    electron = .false.                  ! Calculate all results for electrons INSTEAD OF ions (only one species per PENTRC run)
    nutype = "harmonic"                 ! Collision operator: "zero", "krook", "harmonic"
    f0type = "maxwellian"               ! Distribution function: "maxwellian"
    jac_in = ""                         ! Jacobian of peq_file harmonic decomposition. 'default' uses jac_type of idconfile.
    jsurf_in=0                          ! True(1) if peq_file is area weighted
    tmag_in =1                          ! True(1) if peq_file has toroidal angle defined by jac_in. False(0) if machine angle.
/                                       
&PENT_CONTROL
    wefac = 1                           ! Artificial factor applied to omega_EXB
    wdfac = 1                           ! Artificial factor applied to omega_b
    wpfac = 1                           ! Artificial factor applied to omega_phi
    nufac = 1                           ! Artificial factor applied to collision operator
    divxfac = 1                         ! Artificial factor applied to div xi_perp

    atol_xlmda = 1e-9                   ! Absolute tolerance in energy and pitch integration
    rtol_xlmda = 1e-4                   ! Relative tolerance in energy and pitch integration
    atol_psi = 1e-6                     ! Absolute tolerance in psi_n integration
    rtol_psi = 1e-4                     ! Relative tolerance in psi_n integration
    ntheta = 128                        ! Poloidal angle grid for bounce integration
    nlmda = 128                         ! Pitch grid for omega_D, oemga_b, dJdJ

    xmax = 128                          ! Upper bound of energy integral (x=E/T)
    ximag = 0.0                         ! Step off real energy axis (use to avoid zero collisionality singularities)
    psilims = 0 1                       ! Range in psi_n
/
&PENT_OUTPUT
    moment = "pressure"                 ! Use 'pressure' for torque and particle transport, 'heat' for heat transport

    fgar_flag = t          		! Full general aspect ratio calculation
    tgar_flag = t                       ! Trapped general aspect ratio calculation
    pgar_flag = f                       ! Passing general aspect ratio calculation
    clar_flag = f                       ! Circular large aspect ratio calculation
    rlar_flag = f                       ! Reduced large aspect ratio calculation
    fcgl_flag = f                       ! Fluid Chew-Goldberger-Low limit
    wxyz_flag = f                       ! Euler-lagrange equation matrix output at psiout
    fkmm_flag = f                       ! Full euler-lagrange matrix calculation (t,p also available)
    ftmm_flag = f                       ! Full torque mxm matrix calculation (t,p also available)
    fwmm_flag = f                       ! Full dW mxm matrix calculation (t,p also available)

    output_ascii = t                    ! Write ascii output files
    output_netcdf = t                   ! Write netcdf output files

    xlmda_out = f                       ! Output energy and pitch integrands on psi_out
    theta_out = f                       ! Output bounce integrands on psi_out
    psi_out = 0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0   ! 10 surfaces for energy, pitch, and poloidal outputs

    equil_grid = f                      ! Recalculate each requested method on equilibrium grid from DCON
    input_grid = f                      ! Recalculate each requested method on input displacements' grid

    verbose = t                         ! Print progress to terminal
    clean = f                           ! Remove pentrc_*.out before running
/
&PENT_ADMIN                             
    fnml_flag = f                       ! Special function matrix [JKP PRL 2009]
    ellip_flag = f                      ! Elliptic integral functions
    diag_flag = f                       ! Diagnostic module
    indebug = f                         ! Debug input file parsing and manipulations
    tdebug = f                          ! Debug psi integration
    lambdadebug = f                     ! Debug pitch integration
    xdebug = f                          ! Debug energy integration
/

